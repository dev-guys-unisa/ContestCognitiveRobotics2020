#!/usr/bin/env python
import time
import rospy
from naoqi_driver import NaoqiNode
from collections import Counter
from pepper_detector.msg import DetectionWithPose

class ObjectSay(NaoqiNode):

    def __init__(self):
        NaoqiNode.__init__(self, 'object_say')
        self.connectNaoqi()
        self.pictures = 0
        self.msg = ""
        self.counter = Counter()
        pass

    def init_subs(self, topic):
        # Init subscriber for receiving detections
        self.say_sub = rospy.Subscriber(topic, DetectionWithPose, self.callback)

    def connectNaoqi(self):
        # Speech Proxy attachment
        self.speech = self.get_proxy("ALAnimatedSpeech")

    def say(self, msg):
        # Sending phrase and bodyLanguage to Pepper
        self.speech.say(msg, {"bodyLanguageMode":"contextual"})
        
    def callback(self, data):
        """
        This callback function takes care of constructing the sentence that will 
        subsequently be pronounced by Pepper, taking into account the position of 
        the objects and their number.
        E.G. Pepper won't say "mouse, mouse", instead he'll say "two mouses".
        """
        # Incrementing image received counter
        self.pictures += 1
        # The RSPD tag sets the speaking speed 
        self.msg += "\RSPD=65" + "\ On the " if self.pictures == 1 else "Then, on the " 
        self.msg += str(data.pose.data) + " side, I see ^start(animations/Stand/Gestures/Explain_10) "
        # Object counting
        for s in data.detections:
            self.counter[s.data] += 1
        for x in self.counter:
            if self.counter[x] == 1:
                self.msg += "an " if self._is_vowel(x[0]) else "a "
                self.msg += x + ", "
            else:
                self.msg += str(self.counter[x]) + " " + x + "s, "
        self.msg += "and nothing more. "
        self.counter.clear()
        if self.pictures == 3:
            self.say(self.msg)
            rospy.loginfo(self.msg)

    def _is_vowel(self, char):
        if (char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'):
            return True
        else:
            return False

if __name__ == "__main__":
    obj = ObjectSay()
    obj.init_subs("/pepper_detective")
    rospy.spin()
