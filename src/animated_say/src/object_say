#!/usr/bin/env python
# -------------------------------------------------------------------
# *
# * This module has been developed by Group 18 @ Cognitive Robotics DIEM.UNISA.
# *
# * Title:    object_say
# * Author:   Fina, Puzo, Russomanno, Ventre
# * Org.:     UNISA - DIEM - Artificial Intelligence - Cognitive Robotics - Group 18
# * Date:     23 Nov, 2020
# *
# * This file implements a ROS node to generate the final sentence
# * after performing the object detection.
# *
# * -------------------------------------------------------------------

# -------- LOADING REQUIRED LIBRARIES --------
import time
import rospy
from naoqi_driver import NaoqiNode
from collections import Counter
from pepper_detector.msg import DetectionWithPose
#from pattern.en import pluralize as pl

# -------- CLASS DECLARATION --------
class ObjectSay(NaoqiNode):
    """
    The ObjectSay class is responsible for interacting with Pepper 
    to make him able to tell all the objects he has seen through the camera
    """

    def __init__(self):
        """
        The ObjectSay class constructor
        """
        NaoqiNode.__init__(self, 'object_say')
        self.connect_naoqi()
        self.pictures = 0
        self.msg = ""
        self.counter = Counter()
        pass

    def init_subs(self, topic):
        """
        The init_subs() function initialize the ROS subscriber responsible to detect poses
        
        Args:
            topic (string): the topic to which the node must be subscribed
        """
        # Init subscriber for receiving detections
        self.say_sub = rospy.Subscriber(topic, DetectionWithPose, self.callback)

    def connect_naoqi(self):
        """
        The connect_naoqi() function attaches the ALAnimatedSpeech proxy
        """
        # Speech Proxy attachment
        self.speech = self.get_proxy("ALAnimatedSpeech")

    def say(self, msg):
        """
        The say() function is responsible to use the proxy and send phrases that Pepper has to say
        
        Args:
        msg (string): the phrase that Pepper must say
        """
        # Sending phrase and bodyLanguage to Pepper
        self.speech.say(msg, {"bodyLanguageMode":"contextual"})
        
    def callback(self, data):
        """
        This callback function takes care of constructing the sentence that will 
        subsequently be pronounced by Pepper, taking into account the position of 
        the objects and their number.
        E.G. Pepper won't say "mouse, mouse", instead he'll say "two mouses".
        
        Args:
            data (DetectionWithPose): side of the captured image, objects detected in the image
        """
        # Incrementing image received counter
        self.pictures += 1
        # The RSPD tag sets the speaking speed 
        self.msg += "\RSPD=65" + "\ On the " if self.pictures == 1 else "Then, on the " 
        self.msg += str(data.pose.data) + " side, I see ^start(animations/Stand/Gestures/Explain_10) "
        # Object counting
        if len(data.detections) == 0: # see nothing in that image
            self.msg += "nothing. "
        else: # counting
            for s in data.detections:
                self.counter[s.data] += 1                
            for x in self.counter:
                if self.counter[x] == 1:
                    self.msg += "an " if self._is_vowel(x[0]) else "a "
                    self.msg += x + ", "
                else:
                    # Plural if the objects are more than one
                    # x = pl(x)
                    x += "s"
                    self.msg += str(self.counter[x]) + " " + x + ", "
            self.msg += "and nothing more. "
            self.counter.clear() # reset counting dict
        # The message is constructed and Pepper can say it
        if self.pictures == 3:
            self.say(self.msg)
            rospy.loginfo(self.msg)

    def _is_vowel(self, char):
        """
        The private function _is_vowel() is an helper to better construct the 
        message pepper should speak in the callback () function.

        Args:
            char (string): single caracter to determine if it is a vowel or not
        
        Returns:
            boolean: True if char is a vowel, False otherwise
        """
        # This function checks if the next word starts with a vowel
        if (char == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u'):
            return True
        else:
            return False

# -------- MAIN --------

if __name__ == "__main__":
    obj = ObjectSay()
    obj.init_subs("/pepper_detective")
    rospy.spin()
