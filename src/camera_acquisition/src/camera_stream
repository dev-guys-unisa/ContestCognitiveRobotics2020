#!/usr/bin/env python
# -------------------------------------------------------------------
# *
# * This module has been developed by Group 18 @ Cognitive Robotics DIEM.UNISA.
# *
# * Title:	camera_stream
# * Author:	Fina, Puzo, Russomanno, Ventre
# * Org.: 	UNISA - DIEM - Artificial Intelligence - Cognitive Robotics - Group 18
# * Date:    23 Nov, 2020
# *
# * This file implements a ROS node which receives the stream of a camera and publish it.
# *
# * -------------------------------------------------------------------

# -------- LOADING REQUIRED LIBRARIES --------
import os
import rospy
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import cv2 as cv

# -------- TOPIC DECLARATION --------
topic = "/pepper_robot/camera/front/camera/image_raw"

# -------- CLASS DECLARATION --------
class ImageRetriever:
    """
    The ImageRetriever class is responsible to show the video captured from the camera
    """

    def __init__(self, topic):
      """
      The ImageRetriever class constructor

      Args:
        topic (string): the topic to which the node must be subscribed
      """
      # CvBridge Object to convert Sensor_msgs Image to cv2 Image
      self.bridge = CvBridge()
      self.topic = topic
      # Subscription as a Subscriber to the topic /pepper_robot/camera/front/camera/image_raw 
      rospy.loginfo("Intialized Subcriber to topic %s", self.topic) 
      self.image_sub = rospy.Subscriber(topic, Image, self.callback)

    def callback(self, data):
      """
      The callback() function receives data from the topic above and is
      able to popup a window and show the images coming from the Pepper's camera
      
      Args:
        data (sensor_msgs/Image): the image coming from the camera
      """
      try:
        # Conversion to cv2 image using bgr8 encoding 
        frame = self.bridge.imgmsg_to_cv2(data, "bgr8")
      except CvBridgeError as e:
        print(e)
      # Showing frame    
      cv.imshow("Camera_Stream", frame)

# -------- MAIN --------
if __name__ == '__main__':
    # Rospy Node
    rospy.init_node("camera_stream")
    rospy.loginfo("Intializing /camera_stream node")
    ir = ImageRetriever(topic)
    try:
        rospy.spin()
    except KeyboardInterrupt:
        print("Shutting down")
    cv.destroyAllWindows()
